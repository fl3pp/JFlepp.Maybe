# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'JFlepp.Maybe.sln'
  testResultsDirectory: "$(Agent.TempDirectory)\\testresults"
  testCoverageDirectory: "$(Agent.TempDirectory)\\coverage"
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: Setup dotnet
  inputs:
    packageType: 'sdk'
    useGlobalJson: true

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: '$(Solution)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(Solution)'
    arguments: >
      --no-restore
      --configuration $(buildConfiguration)

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: 'test'
    projects: '$(Solution)'
    arguments: >
        --configuration $(buildConfiguration)
        --logger trx
        --results-directory $(testResultsDirectory)
        --collect:"XPlat Code Coverage"
    publishTestResults: false
    nobuild: true

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(testResultsDirectory)\**\coverage.cobertura.xml -targetdir:$(testCoverageDirectory) -reporttypes:HtmlInline_AzurePipelines;Cobertura
  displayName: Create Code coverage report

- task: PublishTestResults@2
  displayName: Publish test results
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**.trx'
    searchFolder: '$(testResultsDirectory)'
    mergeTestResults: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)\CodeCoverage\Cobertura.xml'
    reportDirectory: '$(testCoverageDirectory)'

